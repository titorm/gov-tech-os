#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🔍 Running pre-commit checks..."

# Determine staged files and temporarily unstage any under dist or with a .dist suffix so checks skip build artifacts.
staged_files=$(git diff --name-only --cached)
dist_files=$(printf "%s" "$staged_files" | awk '/(^|\/)(\.dist|dist)(\/|$)|\.dist$/')
if [ -n "$dist_files" ]; then
	echo "Found staged dist/.dist files — temporarily unstaging them for validation:"
	printf "%s\n" "$dist_files"
	# Unstage them safely (preserve working tree), run validations, then re-stage.
	printf "%s\n" "$dist_files" | xargs -I{} git restore --staged -- {}
	echo "Running lint-staged on remaining staged files..."
	pnpm lint-staged || { echo "lint-staged failed"; # re-stage before exit
		printf "%s\n" "$dist_files" | xargs -I{} git add -- {}; exit 1; }
	# Re-stage previously unstaged dist files
	printf "%s\n" "$dist_files" | xargs -I{} git add -- {}
else
	echo "Running lint-staged..."
	pnpm lint-staged || { echo "lint-staged failed"; exit 1; }
fi

# Run type checking only for packages we're actively modifying to avoid blocking commits
echo "🔧 Running type check for active packages (ui and types)..."
# Run package-level type-checks by executing pnpm in the package directories to avoid running turbo across the whole repo
(cd packages/ui && pnpm run type-check) || { echo "Type-check failed in @repo/ui. Fix TypeScript errors or run 'pnpm -C packages/ui run type-check' locally to see details."; exit 1; }
(cd packages/types && pnpm run type-check) || { echo "Type-check failed in @repo/types. Fix TypeScript errors or run 'pnpm -C packages/types run type-check' locally to see details."; exit 1; }

echo "✅ Pre-commit checks completed!"
