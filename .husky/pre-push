echo "ðŸš€ Running pre-push checks..."

# Determine changed files in the push and exclude any in dist/.dist so we don't validate build artifacts.
# Use origin/main...HEAD when available; otherwise fall back to recent commit range to avoid 'unknown revision' errors.
if git rev-parse --verify origin/main >/dev/null 2>&1; then
	changed_files=$(git diff --name-only origin/main...HEAD) || changed_files=""
elif git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
	changed_files=$(git diff --name-only HEAD~1..HEAD) || changed_files=""
else
	# As a last resort, list files changed in HEAD
	changed_files=$(git diff-tree --no-commit-id --name-only -r HEAD) || changed_files=""
fi
dist_files=$(printf "%s" "$changed_files" | awk '/(^|\/)(\.dist|dist)(\/|$)|\.dist$/')
if [ -n "$dist_files" ]; then
	echo "Found dist/.dist files in the change set â€” skipping linting for those paths:"
	printf "%s\n" "$dist_files"
	# Temporarily unstage dist files from index for linting purposes
	printf "%s\n" "$dist_files" | xargs -I{} git restore --staged -- {} || true
	echo "Running lint-staged on remaining staged files..."
	pnpm lint-staged || { echo "lint-staged failed"; # re-stage before exit
		printf "%s\n" "$dist_files" | xargs -I{} git add -- {}; exit 1; }
	# Re-stage previously unstaged dist files
	printf "%s\n" "$dist_files" | xargs -I{} git add -- {}
else
	echo "Running lint-staged..."
	pnpm lint-staged || { echo "lint-staged failed"; exit 1; }
fi

echo "ðŸ”§ Running type checks for active packages (ui and types)..."
# Run package-level type-checks by executing pnpm in the package directories to avoid turbo across the whole repo
(cd packages/ui && pnpm run type-check) || { echo "Type-check failed in @repo/ui. Fix TypeScript errors."; exit 1; }
(cd packages/types && pnpm run type-check) || { echo "Type-check failed in @repo/types. Fix TypeScript errors."; exit 1; }

echo "ðŸ§ª Running tests..."
pnpm test || { echo "Tests failed"; exit 1; }

echo "âœ… Pre-push checks completed!"
